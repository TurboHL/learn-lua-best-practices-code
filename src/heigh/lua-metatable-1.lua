---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yanghl.
--- DateTime: 19/9/4 上午11:11
---

local set1 = {10, 20, 30}   -- 集合
local set3 = {10, 20, 30}   -- 集合
local set2 = {20, 40, 50}   -- 集合


--- 通过设置下标 去重 同一下标值会存在一个
local add1  = function(self,another)
    local set = {}
    local result = {}

    for i, j in pairs(self) do
        print(j)
        set[j] = true
    end

    for i, j in pairs(another) do
        print(j)
        set[j] = true
    end

    for i, j in pairs(set) do
        table.insert(result,i)
    end

    return result
end

--setmetatable(set1,{__add = add1})
--local set3 = set1 + set2
--print(table.concat(set3," "))

mytable = setmetatable({key1 = "value1"},   --原始表
        {__index = function(self, key)            --重载函数
            if key == "key2" then
                return "metatablevalue"
            end
        end
        })

--print(mytable.key1,mytable.key2)  --> output：value1 metatablevalue


t = setmetatable({[1]="hello"},{
    __index = {
        [2] = "word"
    }
})
--print(t[1],t[2])

local arr = {1,2,3,4}
arr = setmetatable(arr,{
    __tostring = function(self)
        local result = '{'
        local seq = ''
        for _, i in pairs(self) do
            result = result .. seq .. i
            print(result)
            seq = ","
        end
        result = result .. "}"
        return result
    end
})

--print(arr)

local functor = {}
function func1(self,arg)
    print("call from ",arg)
end

function func2(self,arg,arg2)
    print("call from ",arg,arg2)
end

setmetatable(functor,{__call = func2})

functor("functor","bb") --> call from functor
print(functor)

Object = setmetatable({},{__metatable = "you cannot access here"})

print(getmetatable(Object))





